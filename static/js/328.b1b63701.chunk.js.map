{"version":3,"file":"static/js/328.b1b63701.chunk.js","mappings":"mRACMA,EAAW,+BACXC,EAAU,mCAEHC,EAA2B,WACtC,OAAOC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,qCAAkDC,GAC1D,EAEYG,EAAoB,SAAAC,GAC/B,OAAOF,EAAAA,EAAAA,IAAA,UACFH,EADE,iCAC+BC,EAD/B,iCAC+DI,EAD/D,+BAGR,EAEYC,EAAqB,SAAAC,GAChC,OAAOJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+BO,EAA/B,oBAA6CN,EAA7C,mBACR,EAEYO,EAAkB,SAAAD,GAC7B,OAAOJ,EAAAA,EAAAA,IAAA,UACFH,EADE,kBACgBO,EADhB,4BACsCN,EADtC,mBAGR,EAEYQ,EAAqB,SAAAF,GAChC,OAAOJ,EAAAA,EAAAA,IAAA,UACFH,EADE,kBACgBO,EADhB,4BACsCN,EADtC,0BAGR,C,qHC1BYS,GAAaC,E,OAAAA,IAAO,KAAPA,CAAH,gD,SC0CvB,EAxCe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAKR,OAJAE,EAAAA,EAAAA,YAAU,YACRT,EAAAA,EAAAA,IAAgBO,GAASG,MAAK,gBAAWC,EAAX,EAAGC,KAAQD,KAAX,OAAwBL,EAAUK,EAAlC,GAC/B,GAAE,CAACJ,IAEkB,IAAlBF,EAAOQ,QACF,qEAIP,wBACGR,EAAOS,KAAI,YAAmD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC5C,OACE,UAAChB,EAAD,WACoB,OAAjBc,GACC,gBACEG,IAAK,oDACLC,IAAI,MACJC,MAAM,QACNC,OAAO,WAGT,gBACEH,IAAG,wCAAmCH,GACtCI,IAAI,MACJC,MAAM,QACNC,OAAO,WAGX,uBAAIP,KACJ,uCAAeG,OAjBAD,EAoBpB,KAGN,C","sources":["api/moviesApi.js","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9f3449ca8495a13b6d35e887839f0061';\n\nexport const FetchTrendingMouviesList = () => {\n  return axios.get(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`);\n};\n\nexport const FetchSearchMovies = query => {\n  return axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n};\n\nexport const FetchMoviesDetails = id => {\n  return axios.get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`);\n};\n\nexport const FetchActorsList = id => {\n  return axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchMoviesReviews = id => {\n  return axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n};\n","import styled from 'styled-components';\n\nexport const ActorsItem = styled('li')`\n  margin-bottom: 50px;\n`;\n","import { FetchActorsList } from 'api/moviesApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ActorsItem } from './Cast.styled';\nconst Actors = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    FetchActorsList(movieId).then(({ data: { cast } }) => setActors(cast));\n  }, [movieId]);\n\n  if (actors.length === 0) {\n    return <p>We don't have any actors for this movies</p>;\n  }\n\n  return (\n    <ul>\n      {actors.map(({ name, profile_path, credit_id, character }) => {\n        return (\n          <ActorsItem key={credit_id}>\n            {profile_path === null ? (\n              <img\n                src={'https://emojis.wiki/thumbs/emojis/cross-mark.webp'}\n                alt=\"img\"\n                width=\"100px\"\n                height=\"150px\"\n              />\n            ) : (\n              <img\n                src={`http://image.tmdb.org/t/p/w500${profile_path}`}\n                alt=\"img\"\n                width=\"100px\"\n                height=\"150px\"\n              />\n            )}\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </ActorsItem>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Actors;\n"],"names":["BASE_URL","API_KEY","FetchTrendingMouviesList","axios","FetchSearchMovies","query","FetchMoviesDetails","id","FetchActorsList","FetchMoviesReviews","ActorsItem","styled","useState","actors","setActors","movieId","useParams","useEffect","then","cast","data","length","map","name","profile_path","credit_id","character","src","alt","width","height"],"sourceRoot":""}